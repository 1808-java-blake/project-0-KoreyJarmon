package com.revature.daos;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

public class UserSerializer  implements UserDao
{
	

	@Override
	public void createUser(User u) {
		if (u == null) {
			return;
		}
		File f = new File("src/main/resources/users/" + u.getUsername() + ".txt");
		System.out.println(f.getName());
		if (f.exists()) {
			return;
		}
		try {
			f.createNewFile();
		} catch (IOException e1) {
//			e1.printStackTrace();
			return;
		}
		try (ObjectOutputStream oos = new ObjectOutputStream(
				new FileOutputStream("src/main/resources/users/" + u.getUsername() + ".txt"))) {
			
			oos.writeObject(u);
		
		} catch (FileNotFoundException e) {
//			e.printStackTrace();
		} catch (IOException e) {
//			e.printStackTrace();
		}
	}

	@Override
	public User findUsernameAndPassword(String username, String password) {
		//verified that was passed in is not null
		if(username == null || password == null)
			return null;
		try (ObjectInputStream ois = new ObjectInputStream(
				new FileInputStream("src/main/resources/users/" + username + ".txt"))) {
			
			User u = (User) ois.readObject(); //retrieve user if it can
			
			//verify if password matches
			if(u.getPassword().equals(password)) {
			return u;
			}
			else {
				return null;
			}
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public void updateUser(User u) {
		if (u == null) {
			return;
		}
		File f = new File("src/main/resources/users/" + u.getUsername() + ".txt");
		//System.out.println(f.getName());
		try {
			f.createNewFile();
		} catch (IOException e1) {
//			e1.printStackTrace();
			return;
		}
		try (ObjectOutputStream oos = new ObjectOutputStream(
				new FileOutputStream("src/main/resources/users/" + u.getUsername() + ".txt"))) {
			
			oos.writeObject(u);
		
		} catch (FileNotFoundException e) {
//			e.printStackTrace();
		} catch (IOException e) {
//			e.printStackTrace();
		}
		
	}

	@Override
	public void deleteUser(User u) {
		
		
	}
	
	@Override
	public User adminSearch(String username) {
		//verified that was passed in is not null
				if(username == null)
					return null;
				try (ObjectInputStream ois = new ObjectInputStream(
						new FileInputStream("src/main/resources/users/" + username + ".txt"))) {
					
					User u = (User) ois.readObject(); //retrieve user if it can
					
				} catch (FileNotFoundException e) {
					e.printStackTrace();
				} catch (IOException e) {
					e.printStackTrace();
				} catch (ClassNotFoundException e) {
					e.printStackTrace();
				}
				return u;
	}
}
